import React, { useState, useEffect } from 'react';
import { Search, Plus, Edit, Trash2, Users, FileText, MessageSquare, Settings, Send, Paperclip, Circle, X, ChevronDown, ChevronUp, Calendar, Clock, Star, Hash, User, Moon, Sun, Camera } from 'lucide-react';

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [currentProject, setCurrentProject] = useState(null);
  const [activeTab, setActiveTab] = useState('tasks');
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [signupForm, setSignupForm] = useState({ email: '', username: '', password: '' });
  const [showSignup, setShowSignup] = useState(false);
  const [taskFilter, setTaskFilter] = useState('all');
  const [taskSearch, setTaskSearch] = useState('');
  const [selectedChannel, setSelectedChannel] = useState('general');
  const [messageInput, setMessageInput] = useState('');
  const [editingDoc, setEditingDoc] = useState(null);
  const [editingTask, setEditingTask] = useState(null);
  const [newTaskForm, setNewTaskForm] = useState({ title: '', description: '', priority: 'medium', tags: [] });
  const [showNewTaskForm, setShowNewTaskForm] = useState(false);
  const [tagInput, setTagInput] = useState('');
  const [expandedDocs, setExpandedDocs] = useState({});
  const [showAddSection, setShowAddSection] = useState(false);
  const [newSectionForm, setNewSectionForm] = useState({ title: '', content: '' });
  const [chatLeftView, setChatLeftView] = useState('channels'); // 'channels' or 'members'
  const [darkMode, setDarkMode] = useState(false);
  const [showProfile, setShowProfile] = useState(false);
  const [profileForm, setProfileForm] = useState({ name: '', image: '' });
  const [showProjectModal, setShowProjectModal] = useState(false);
  const [editingProject, setEditingProject] = useState(null);
  const [projectForm, setProjectForm] = useState({ title: '', description: '', image: '' });

  // Dummy data
  const [users, setUsers] = useState([
    { id: 1, username: 'admin', email: 'admin@gamedev.com', password: 'admin123', role: 'admin', name: 'Admin User', online: true, image: '' },
    { id: 2, username: 'dev1', email: 'john@gamedev.com', password: 'dev123', role: 'user', name: 'John Developer', online: true, image: '' },
    { id: 3, username: 'dev2', email: 'jane@gamedev.com', password: 'dev123', role: 'user', name: 'Jane Designer', online: false, image: '' },
    { id: 4, username: 'dev3', email: 'bob@gamedev.com', password: 'dev123', role: 'user', name: 'Bob Artist', online: true, image: '' },
  ]);

  const [projects, setProjects] = useState([
    {
      id: 1,
      title: 'Space Adventure RPG',
      description: 'An epic space exploration game with RPG elements',
      image: 'https://via.placeholder.com/300x200/4F46E5/ffffff?text=Space+RPG',
      users: [1, 2, 3],
      tasks: [
        { id: 1, title: 'Design main character', description: 'Create concept art for the protagonist', status: 'todo', priority: 'high', tags: ['art', 'character'] },
        { id: 2, title: 'Implement movement system', description: 'Basic WASD movement with physics', status: 'inprogress', priority: 'high', tags: ['programming', 'core'] },
        { id: 3, title: 'Create space station tileset', description: 'Design modular tileset for space stations', status: 'complete', priority: 'medium', tags: ['art', 'environment'] },
      ],
      documentation: {
        'Game Overview': 'Space Adventure RPG is an ambitious project combining exploration with deep RPG mechanics...',
        'Game Mechanics': 'Core mechanics include: Ship customization, Combat system, Resource management...',
        'Story & Lore': 'Set in the year 2385, humanity has colonized multiple star systems...',
        'Art Direction': 'Visual style: Retro-futuristic with vibrant colors and clean UI...',
        'Technical Specifications': 'Engine: Unity 2023 LTS, Target platforms: PC, Console...',
        'Development Timeline': 'Q1 2024: Pre-production, Q2 2024: Alpha, Q3 2024: Beta...'
      },
      channels: [
        { id: 'general', name: 'general' },
        { id: 'art', name: 'art-discussion' },
        { id: 'programming', name: 'programming' }
      ],
      messages: {
        general: [
          { id: 1, userId: 1, text: 'Welcome to the Space Adventure RPG project!', timestamp: new Date('2024-01-15T10:00:00'), channel: 'general' },
          { id: 2, userId: 2, text: 'Excited to work on this!', timestamp: new Date('2024-01-15T10:05:00'), channel: 'general' },
        ]
      }
    },
    {
      id: 2,
      title: 'Fantasy Puzzle Game',
      description: 'A magical puzzle adventure with stunning visuals',
      image: 'https://via.placeholder.com/300x200/10B981/ffffff?text=Puzzle+Game',
      users: [1, 4],
      tasks: [
        { id: 4, title: 'Design puzzle mechanics', description: 'Create core puzzle solving mechanics', status: 'inprogress', priority: 'high', tags: ['design', 'gameplay'] },
      ],
      documentation: {
        'Game Overview': 'A whimsical puzzle game set in a magical world...',
        'Game Mechanics': 'Match-3 mechanics with unique spell-casting twist...',
        'Story & Lore': 'Follow the journey of a young wizard...',
        'Art Direction': 'Hand-drawn art style with watercolor aesthetics...',
        'Technical Specifications': 'Engine: Godot 4.0, Target platforms: Mobile, PC...',
        'Development Timeline': 'Q1 2024: Concept, Q2 2024: Production...'
      },
      channels: [
        { id: 'general', name: 'general' }
      ],
      messages: {
        general: []
      }
    }
  ]);

  useEffect(() => {
    if (currentUser) {
      setProfileForm({ name: currentUser.name, image: currentUser.image || '' });
    }
  }, [currentUser]);

  const handleLogin = (e) => {
    e.preventDefault();
    const user = users.find(u => u.username === loginForm.username && u.password === loginForm.password);
    if (user) {
      setCurrentUser(user);
      setIsLoggedIn(true);
    } else {
      alert('Invalid credentials. Try: admin/admin123 or dev1/dev123');
    }
  };

  const handleSignup = (e) => {
    e.preventDefault();
    if (!signupForm.email || !signupForm.username || !signupForm.password) {
      alert('Please fill in all fields');
      return;
    }
    
    if (users.find(u => u.username === signupForm.username)) {
      alert('Username already exists');
      return;
    }

    const newUser = {
      id: Date.now(),
      email: signupForm.email,
      username: signupForm.username,
      password: signupForm.password,
      role: 'user',
      name: signupForm.username,
      online: true,
      image: ''
    };

    setUsers([...users, newUser]);
    setCurrentUser(newUser);
    setIsLoggedIn(true);
    setShowSignup(false);
    setSignupForm({ email: '', username: '', password: '' });
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setCurrentUser(null);
    setCurrentProject(null);
  };

  const updateProfile = () => {
    const updatedUser = { ...currentUser, ...profileForm };
    setUsers(users.map(u => u.id === currentUser.id ? updatedUser : u));
    setCurrentUser(updatedUser);
    setShowProfile(false);
  };

  const getVisibleProjects = () => {
    if (currentUser.role === 'admin') {
      return projects;
    }
    return projects.filter(p => p.users.includes(currentUser.id));
  };

  const openProject = (project) => {
    setCurrentProject(project);
    setActiveTab('tasks');
  };

  const openProjectModal = (project = null) => {
    if (project) {
      setEditingProject(project);
      setProjectForm({
        title: project.title,
        description: project.description,
        image: project.image
      });
    } else {
      setEditingProject(null);
      setProjectForm({ title: '', description: '', image: '' });
    }
    setShowProjectModal(true);
  };

  const saveProject = () => {
    if (!projectForm.title || !projectForm.description) {
      alert('Please fill in all required fields');
      return;
    }

    if (editingProject) {
      // Update existing project
      setProjects(projects.map(p => 
        p.id === editingProject.id 
          ? { ...p, ...projectForm }
          : p
      ));
    } else {
      // Create new project
      const newProject = {
        id: Date.now(),
        ...projectForm,
        image: projectForm.image || 'https://via.placeholder.com/300x200/6366f1/ffffff?text=New+Project',
        users: [currentUser.id],
        tasks: [],
        documentation: {
          'Game Overview': '',
          'Game Mechanics': '',
          'Story & Lore': '',
          'Art Direction': '',
          'Technical Specifications': '',
          'Development Timeline': ''
        },
        channels: [{ id: 'general', name: 'general' }],
        messages: { general: [] }
      };
      setProjects([...projects, newProject]);
    }

    setShowProjectModal(false);
    setEditingProject(null);
    setProjectForm({ title: '', description: '', image: '' });
  };

  const addTask = () => {
    if (!newTaskForm.title) return;
    
    const newTask = {
      id: Date.now(),
      title: newTaskForm.title,
      description: newTaskForm.description,
      status: 'todo',
      priority: newTaskForm.priority,
      tags: newTaskForm.tags
    };

    setProjects(prev => prev.map(p => 
      p.id === currentProject.id 
        ? { ...p, tasks: [...p.tasks, newTask] }
        : p
    ));
    
    setCurrentProject(prev => ({ ...prev, tasks: [...prev.tasks, newTask] }));
    setNewTaskForm({ title: '', description: '', priority: 'medium', tags: [] });
    setShowNewTaskForm(false);
  };

  const updateTask = () => {
    if (!editingTask) return;

    setProjects(prev => prev.map(p => 
      p.id === currentProject.id 
        ? { ...p, tasks: p.tasks.map(t => t.id === editingTask.id ? editingTask : t) }
        : p
    ));
    
    setCurrentProject(prev => ({ 
      ...prev, 
      tasks: prev.tasks.map(t => t.id === editingTask.id ? editingTask : t) 
    }));

    setEditingTask(null);
  };

  const updateTaskStatus = (taskId, newStatus) => {
    setProjects(prev => prev.map(p => 
      p.id === currentProject.id 
        ? { ...p, tasks: p.tasks.map(t => t.id === taskId ? { ...t, status: newStatus } : t) }
        : p
    ));
    
    setCurrentProject(prev => ({ 
      ...prev, 
      tasks: prev.tasks.map(t => t.id === taskId ? { ...t, status: newStatus } : t) 
    }));
  };

  const deleteTask = (taskId) => {
    if (!window.confirm('Delete this task?')) return;
    
    setProjects(prev => prev.map(p => 
      p.id === currentProject.id 
        ? { ...p, tasks: p.tasks.filter(t => t.id !== taskId) }
        : p
    ));
    
    setCurrentProject(prev => ({ 
      ...prev, 
      tasks: prev.tasks.filter(t => t.id !== taskId) 
    }));
  };

  const sendMessage = () => {
    if (!messageInput.trim()) return;

    const newMessage = {
      id: Date.now(),
      userId: currentUser.id,
      text: messageInput,
      timestamp: new Date(),
      channel: selectedChannel
    };

    setProjects(prev => prev.map(p => 
      p.id === currentProject.id 
        ? { 
            ...p, 
            messages: {
              ...p.messages,
              [selectedChannel]: [...(p.messages[selectedChannel] || []), newMessage]
            }
          }
        : p
    ));

    setCurrentProject(prev => ({
      ...prev,
      messages: {
        ...prev.messages,
        [selectedChannel]: [...(prev.messages[selectedChannel] || []), newMessage]
      }
    }));

    setMessageInput('');
  };

  const addTag = () => {
    if (tagInput && !newTaskForm.tags.includes(tagInput)) {
      setNewTaskForm(prev => ({ ...prev, tags: [...prev.tags, tagInput] }));
      setTagInput('');
    }
  };

  const removeTag = (tag) => {
    setNewTaskForm(prev => ({ ...prev, tags: prev.tags.filter(t => t !== tag) }));
  };

  const addEditingTag = () => {
    if (tagInput && editingTask && !editingTask.tags.includes(tagInput)) {
      setEditingTask(prev => ({ ...prev, tags: [...prev.tags, tagInput] }));
      setTagInput('');
    }
  };

  const removeEditingTag = (tag) => {
    setEditingTask(prev => ({ ...prev, tags: prev.tags.filter(t => t !== tag) }));
  };

  const toggleDocSection = (section) => {
    setExpandedDocs(prev => ({ ...prev, [section]: !prev[section] }));
  };

  const deleteDocSection = (section) => {
    if (!window.confirm(`Delete the "${section}" section?`)) return;

    setProjects(prev => prev.map(p => {
      if (p.id === currentProject.id) {
        const newDocs = { ...p.documentation };
        delete newDocs[section];
        return { ...p, documentation: newDocs };
      }
      return p;
    }));

    setCurrentProject(prev => {
      const newDocs = { ...prev.documentation };
      delete newDocs[section];
      return { ...prev, documentation: newDocs };
    });
  };

  const addDocSection = () => {
    if (!newSectionForm.title || !newSectionForm.content) return;

    setProjects(prev => prev.map(p => {
      if (p.id === currentProject.id) {
        return {
          ...p,
          documentation: {
            ...p.documentation,
            [newSectionForm.title]: newSectionForm.content
          }
        };
      }
      return p;
    }));

    setCurrentProject(prev => ({
      ...prev,
      documentation: {
        ...prev.documentation,
        [newSectionForm.title]: newSectionForm.content
      }
    }));

    setNewSectionForm({ title: '', content: '' });
    setShowAddSection(false);
  };

  const filteredTasks = currentProject?.tasks.filter(task => {
    const matchesFilter = taskFilter === 'all' || task.status === taskFilter;
    const matchesSearch = task.title.toLowerCase().includes(taskSearch.toLowerCase()) ||
                         task.description.toLowerCase().includes(taskSearch.toLowerCase()) ||
                         task.tags.some(tag => tag.toLowerCase().includes(taskSearch.toLowerCase()));
    return matchesFilter && matchesSearch;
  }) || [];

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'high': return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';
      case 'medium': return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300';
      case 'low': return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';
      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'todo': return 'bg-gray-100 dark:bg-gray-800';
      case 'inprogress': return 'bg-blue-100 dark:bg-blue-900';
      case 'complete': return 'bg-green-100 dark:bg-green-900';
      default: return 'bg-gray-100 dark:bg-gray-800';
    }
  };

  // User Avatar Component
  const UserAvatar = ({ user, size = 'md' }) => {
    const sizeClasses = {
      sm: 'w-8 h-8 text-sm',
      md: 'w-10 h-10 text-base',
      lg: 'w-20 h-20 text-2xl'
    };

    if (user.image) {
      return (
        <img 
          src={user.image} 
          alt={user.name} 
          className={`${sizeClasses[size]} rounded-full object-cover`}
        />
      );
    }

    return (
      <div className={`${sizeClasses[size]} bg-indigo-500 rounded-full flex items-center justify-center text-white font-semibold`}>
        {user.name.charAt(0).toUpperCase()}
      </div>
    );
  };

  // Modal overlay component
  const Modal = ({ isOpen, onClose, children }) => {
    if (!isOpen) return null;
    
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50" onClick={onClose}>
        <div className={`${darkMode ? 'bg-gray-800 text-white' : 'bg-white'} rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto`} onClick={e => e.stopPropagation()}>
          {children}
        </div>
      </div>
    );
  };

  if (!isLoggedIn) {
    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gradient-to-br from-gray-900 via-purple-900 to-pink-900' : 'bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900'} flex items-center justify-center p-4`}>
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 w-full max-w-md shadow-2xl">
          <h1 className="text-3xl font-bold text-white mb-2 text-center">GameDev Tracker</h1>
          <p className="text-white/70 text-center mb-8">Manage your game development projects</p>
          
          {!showSignup ? (
            <>
              <form onSubmit={handleLogin} className="space-y-4">
                <div>
                  <label className="block text-white/90 text-sm font-medium mb-2">Username</label>
                  <input
                    type="text"
                    className="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-white/60 focus:bg-white/30 transition"
                    placeholder="Enter username"
                    value={loginForm.username}
                    onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}
                  />
                </div>
                
                <div>
                  <label className="block text-white/90 text-sm font-medium mb-2">Password</label>
                  <input
                    type="password"
                    className="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-white/60 focus:bg-white/30 transition"
                    placeholder="Enter password"
                    value={loginForm.password}
                    onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}
                  />
                </div>
                
                <button
                  type="submit"
                  className="w-full py-3 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-lg font-semibold hover:from-indigo-600 hover:to-purple-700 transition transform hover:scale-105"
                >
                  Login
                </button>
              </form>
              
              <div className="mt-6 text-center">
                <p className="text-white/70 text-sm">Don't have an account?</p>
                <button
                  onClick={() => setShowSignup(true)}
                  className="text-white font-semibold hover:text-white/80 transition"
                >
                  Sign up
                </button>
              </div>
              
              <div className="mt-6 p-4 bg-white/10 rounded-lg">
                <p className="text-white/80 text-sm">Demo Credentials:</p>
                <p className="text-white/60 text-xs mt-1">Admin: admin/admin123</p>
                <p className="text-white/60 text-xs">User: dev1/dev123</p>
              </div>
            </>
          ) : (
            <>
              <form onSubmit={handleSignup} className="space-y-4">
                <div>
                  <label className="block text-white/90 text-sm font-medium mb-2">Email</label>
                  <input
                    type="email"
                    className="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-white/60 focus:bg-white/30 transition"
                    placeholder="Enter email"
                    value={signupForm.email}
                    onChange={(e) => setSignupForm({ ...signupForm, email: e.target.value })}
                  />
                </div>
                
                <div>
                  <label className="block text-white/90 text-sm font-medium mb-2">Username</label>
                  <input
                    type="text"
                    className="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-white/60 focus:bg-white/30 transition"
                    placeholder="Choose username"
                    value={signupForm.username}
                    onChange={(e) => setSignupForm({ ...signupForm, username: e.target.value })}
                  />
                </div>
                
                <div>
                  <label className="block text-white/90 text-sm font-medium mb-2">Password</label>
                  <input
                    type="password"
                    className="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-white/60 focus:bg-white/30 transition"
                    placeholder="Create password"
                    value={signupForm.password}
                    onChange={(e) => setSignupForm({ ...signupForm, password: e.target.value })}
                  />
                </div>
                
                <button
                  type="submit"
                  className="w-full py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg font-semibold hover:from-green-600 hover:to-emerald-700 transition transform hover:scale-105"
                >
                  Sign Up
                </button>
              </form>
              
              <div className="mt-6 text-center">
                <p className="text-white/70 text-sm">Already have an account?</p>
                <button
                  onClick={() => setShowSignup(false)}
                  className="text-white font-semibold hover:text-white/80 transition"
                >
                  Login
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    );
  }

  if (!currentProject) {
    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <header className={`${darkMode ? 'bg-gradient-to-r from-gray-800 to-gray-700' : 'bg-gradient-to-r from-indigo-600 to-purple-600'} text-white p-4 shadow-lg`}>
          <div className="max-w-7xl mx-auto flex justify-between items-center">
            <h1 className="text-2xl font-bold">GameDev Tracker</h1>
            <div className="flex items-center gap-4">
              <button
                onClick={() => setDarkMode(!darkMode)}
                className="p-2 rounded-lg bg-white/20 hover:bg-white/30 transition"
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
              <button
                onClick={() => setShowProfile(true)}
                className="p-2 rounded-lg bg-white/20 hover:bg-white/30 transition"
              >
                <UserAvatar user={currentUser} size="sm" />
              </button>
              <span className="text-sm">{currentUser.name}</span>
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-white/20 rounded-lg hover:bg-white/30 transition"
              >
                Logout
              </button>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto p-6">
          <div className="flex justify-between items-center mb-8">
            <h2 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Projects</h2>
            {currentUser.role === 'admin' && (
              <button 
                onClick={() => openProjectModal()}
                className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-lg hover:from-indigo-600 hover:to-purple-700 transition transform hover:scale-105"
              >
                <Plus size={20} />
                New Project
              </button>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {getVisibleProjects().map(project => (
              <div key={project.id} className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition transform hover:scale-105`}>
                <img src={project.image} alt={project.title} className="w-full h-48 object-cover" />
                <div className="p-6">
                  <h3 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-2`}>{project.title}</h3>
                  <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-4`}>{project.description}</p>
                  
                  <div className={`flex items-center gap-2 mb-4 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                    <Users size={16} />
                    <span>{project.users.length} team members</span>
                  </div>
                  
                  <div className="flex gap-2">
                    <button
                      onClick={() => openProject(project)}
                      className="flex-1 px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                    >
                      Open Project
                    </button>
                    {currentUser.role === 'admin' && (
                      <button 
                        onClick={() => openProjectModal(project)}
                        className={`px-4 py-2 ${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-700'} rounded-lg hover:bg-gray-300 transition`}
                      >
                        <Edit size={16} />
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </main>

        {/* Profile Modal */}
        <Modal isOpen={showProfile} onClose={() => setShowProfile(false)}>
          <div className="p-6">
            <h3 className="text-xl font-semibold mb-6">Edit Profile</h3>
            <div className="space-y-4">
              <div className="flex justify-center mb-6">
                <div className="relative">
                  <UserAvatar user={{ ...currentUser, image: profileForm.image }} size="lg" />
                  <button className={`absolute bottom-0 right-0 p-2 ${darkMode ? 'bg-gray-700' : 'bg-white'} rounded-full shadow-lg`}>
                    <Camera size={16} />
                  </button>
                </div>
              </div>
              
              <div>
                <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Name</label>
                <input
                  type="text"
                  className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                    darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                  }`}
                  value={profileForm.name}
                  onChange={(e) => setProfileForm({ ...profileForm, name: e.target.value })}
                />
              </div>
              
              <div>
                <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Profile Image URL</label>
                <input
                  type="text"
                  placeholder="https://example.com/avatar.jpg"
                  className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                    darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                  }`}
                  value={profileForm.image}
                  onChange={(e) => setProfileForm({ ...profileForm, image: e.target.value })}
                />
              </div>
              
              <div className="flex gap-2 pt-4">
                <button
                  onClick={updateProfile}
                  className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                >
                  Save Changes
                </button>
                <button
                  onClick={() => setShowProfile(false)}
                  className={`px-4 py-2 ${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200'} rounded-lg hover:bg-gray-300 transition`}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </Modal>

        {/* Project Modal */}
        <Modal isOpen={showProjectModal} onClose={() => setShowProjectModal(false)}>
          <div className="p-6">
            <h3 className="text-xl font-semibold mb-6">{editingProject ? 'Edit Project' : 'Create New Project'}</h3>
            <div className="space-y-4">
              <div>
                <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Project Title</label>
                <input
                  type="text"
                  className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                    darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                  }`}
                  value={projectForm.title}
                  onChange={(e) => setProjectForm({ ...projectForm, title: e.target.value })}
                />
              </div>
              
              <div>
                <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Description</label>
                <textarea
                  className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 h-24 ${
                    darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                  }`}
                  value={projectForm.description}
                  onChange={(e) => setProjectForm({ ...projectForm, description: e.target.value })}
                />
              </div>
              
              <div>
                <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Project Image URL</label>
                <input
                  type="text"
                  placeholder="https://example.com/project-image.jpg"
                  className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                    darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                  }`}
                  value={projectForm.image}
                  onChange={(e) => setProjectForm({ ...projectForm, image: e.target.value })}
                />
              </div>
              
              <div className="flex gap-2 pt-4">
                <button
                  onClick={saveProject}
                  className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                >
                  {editingProject ? 'Save Changes' : 'Create Project'}
                </button>
                <button
                  onClick={() => {
                    setShowProjectModal(false);
                    setEditingProject(null);
                  }}
                  className={`px-4 py-2 ${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200'} rounded-lg hover:bg-gray-300 transition`}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </Modal>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'} flex flex-col`}>
      <header className={`${darkMode ? 'bg-gradient-to-r from-gray-800 to-gray-700' : 'bg-gradient-to-r from-indigo-600 to-purple-600'} text-white shadow-lg`}>
        <div className="max-w-7xl mx-auto p-4">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-4">
              <button
                onClick={() => setCurrentProject(null)}
                className="px-4 py-2 bg-white/20 rounded-lg hover:bg-white/30 transition"
              >
                ← Back to Projects
              </button>
              <h1 className="text-2xl font-bold">{currentProject.title}</h1>
            </div>
            <div className="flex items-center gap-4">
              <button
                onClick={() => setDarkMode(!darkMode)}
                className="p-2 rounded-lg bg-white/20 hover:bg-white/30 transition"
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
              <button
                onClick={() => setShowProfile(true)}
                className="p-2 rounded-lg bg-white/20 hover:bg-white/30 transition"
              >
                <UserAvatar user={currentUser} size="sm" />
              </button>
              <span className="text-sm">{currentUser.name}</span>
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-white/20 rounded-lg hover:bg-white/30 transition"
              >
                Logout
              </button>
            </div>
          </div>
          
          <nav className="flex gap-1">
            <button
              onClick={() => setActiveTab('tasks')}
              className={`px-6 py-3 rounded-t-lg transition ${
                activeTab === 'tasks' 
                  ? `${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-indigo-600'} font-semibold` 
                  : 'bg-white/20 hover:bg-white/30'
              }`}
            >
              <FileText size={18} className="inline mr-2" />
              Task Tracking
            </button>
            <button
              onClick={() => setActiveTab('docs')}
              className={`px-6 py-3 rounded-t-lg transition ${
                activeTab === 'docs' 
                  ? `${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-indigo-600'} font-semibold` 
                  : 'bg-white/20 hover:bg-white/30'
              }`}
            >
              <FileText size={18} className="inline mr-2" />
              Documentation
            </button>
            <button
              onClick={() => setActiveTab('chat')}
              className={`px-6 py-3 rounded-t-lg transition ${
                activeTab === 'chat' 
                  ? `${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-indigo-600'} font-semibold` 
                  : 'bg-white/20 hover:bg-white/30'
              }`}
            >
              <MessageSquare size={18} className="inline mr-2" />
              Team Chat
            </button>
            {currentUser.role === 'admin' && (
              <button
                onClick={() => setActiveTab('team')}
                className={`px-6 py-3 rounded-t-lg transition ${
                  activeTab === 'team' 
                    ? `${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-indigo-600'} font-semibold` 
                    : 'bg-white/20 hover:bg-white/30'
                }`}
              >
                <Users size={18} className="inline mr-2" />
                Team Management
              </button>
            )}
          </nav>
        </div>
      </header>

      <main className="flex-1 max-w-7xl mx-auto w-full p-6">
        {activeTab === 'tasks' && (
          <div className="space-y-6">
            <div className="flex flex-wrap gap-4 items-center justify-between">
              <div className="flex gap-2">
                <button
                  onClick={() => setTaskFilter('all')}
                  className={`px-4 py-2 rounded-lg transition ${
                    taskFilter === 'all' 
                      ? 'bg-indigo-500 text-white' 
                      : darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'
                  }`}
                >
                  All Tasks
                </button>
                <button
                  onClick={() => setTaskFilter('todo')}
                  className={`px-4 py-2 rounded-lg transition ${
                    taskFilter === 'todo' 
                      ? 'bg-indigo-500 text-white' 
                      : darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'
                  }`}
                >
                  To Do
                </button>
                <button
                  onClick={() => setTaskFilter('inprogress')}
                  className={`px-4 py-2 rounded-lg transition ${
                    taskFilter === 'inprogress' 
                      ? 'bg-indigo-500 text-white' 
                      : darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'
                  }`}
                >
                  In Progress
                </button>
                <button
                  onClick={() => setTaskFilter('complete')}
                  className={`px-4 py-2 rounded-lg transition ${
                    taskFilter === 'complete' 
                      ? 'bg-indigo-500 text-white' 
                      : darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'
                  }`}
                >
                  Complete
                </button>
              </div>
              
              <div className="flex gap-2 items-center">
                <div className="relative">
                  <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search tasks..."
                    className={`pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                      darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                    }`}
                    value={taskSearch}
                    onChange={(e) => setTaskSearch(e.target.value)}
                  />
                </div>
                <button
                  onClick={() => setShowNewTaskForm(true)}
                  className="flex items-center gap-2 px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                >
                  <Plus size={20} />
                  New Task
                </button>
              </div>
            </div>

            {showNewTaskForm && (
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-lg`}>
                <h3 className="text-lg font-semibold mb-4">Create New Task</h3>
                <div className="space-y-4">
                  <input
                    type="text"
                    placeholder="Task title"
                    className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                      darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                    }`}
                    value={newTaskForm.title}
                    onChange={(e) => setNewTaskForm({ ...newTaskForm, title: e.target.value })}
                  />
                  <textarea
                    placeholder="Task description"
                    className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 h-24 ${
                      darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                    }`}
                    value={newTaskForm.description}
                    onChange={(e) => setNewTaskForm({ ...newTaskForm, description: e.target.value })}
                  />
                  <div className="flex gap-4">
                    <select
                      className={`px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                      }`}
                      value={newTaskForm.priority}
                      onChange={(e) => setNewTaskForm({ ...newTaskForm, priority: e.target.value })}
                    >
                      <option value="low">Low Priority</option>
                      <option value="medium">Medium Priority</option>
                      <option value="high">High Priority</option>
                    </select>
                    <div className="flex-1 flex gap-2">
                      <input
                        type="text"
                        placeholder="Add tag"
                        className={`flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                          darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                        }`}
                        value={tagInput}
                        onChange={(e) => setTagInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                      />
                      <button
                        onClick={addTag}
                        className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
                      >
                        Add Tag
                      </button>
                    </div>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {newTaskForm.tags.map(tag => (
                      <span key={tag} className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-full text-sm flex items-center gap-1">
                        {tag}
                        <button onClick={() => removeTag(tag)}>
                          <X size={14} />
                        </button>
                      </span>
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <button
                      onClick={addTask}
                      className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                    >
                      Create Task
                    </button>
                    <button
                      onClick={() => setShowNewTaskForm(false)}
                      className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            )}

            <div className="space-y-4">
              {filteredTasks.map(task => (
                <div key={task.id} className={`${darkMode ? 'bg-gray-800' : 'bg-white'} p-6 rounded-lg shadow-md ${getStatusColor(task.status)}`}>
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className={`text-lg font-semibold ${darkMode ? 'text-white' : ''}`}>{task.title}</h3>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${getPriorityColor(task.priority)}`}>
                          {task.priority.toUpperCase()}
                        </span>
                      </div>
                      <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-3`}>{task.description}</p>
                      <div className="flex flex-wrap gap-2 mb-3">
                        {task.tags.map(tag => (
                          <span key={tag} className={`px-2 py-1 ${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-700'} rounded-full text-xs`}>
                            {tag}
                          </span>
                        ))}
                      </div>
                      <div className="flex gap-2">
                        {task.status === 'todo' && (
                          <button
                            onClick={() => updateTaskStatus(task.id, 'inprogress')}
                            className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition"
                          >
                            Start Task
                          </button>
                        )}
                        {task.status === 'inprogress' && (
                          <button
                            onClick={() => updateTaskStatus(task.id, 'complete')}
                            className="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600 transition"
                          >
                            Complete Task
                          </button>
                        )}
                        {task.status === 'complete' && currentUser.role === 'admin' && (
                          <button
                            onClick={() => updateTaskStatus(task.id, 'todo')}
                            className="px-3 py-1 bg-yellow-500 text-white rounded text-sm hover:bg-yellow-600 transition"
                          >
                            Reopen Task
                          </button>
                        )}
                      </div>
                    </div>
                    {currentUser.role === 'admin' && (
                      <div className="flex gap-2 ml-4">
                        <button 
                          onClick={() => setEditingTask(task)}
                          className={`p-2 ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-500 hover:text-indigo-600'} transition`}
                        >
                          <Edit size={18} />
                        </button>
                        <button
                          onClick={() => deleteTask(task.id)}
                          className={`p-2 ${darkMode ? 'text-gray-400 hover:text-red-400' : 'text-gray-500 hover:text-red-600'} transition`}
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>

            {/* Edit Task Modal */}
            <Modal isOpen={!!editingTask} onClose={() => setEditingTask(null)}>
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">Edit Task</h3>
                {editingTask && (
                  <div className="space-y-4">
                    <input
                      type="text"
                      placeholder="Task title"
                      className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                      }`}
                      value={editingTask.title}
                      onChange={(e) => setEditingTask({ ...editingTask, title: e.target.value })}
                    />
                    <textarea
                      placeholder="Task description"
                      className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 h-24 ${
                        darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                      }`}
                      value={editingTask.description}
                      onChange={(e) => setEditingTask({ ...editingTask, description: e.target.value })}
                    />
                    <div className="flex gap-4">
                      <select
                        className={`px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                          darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                        }`}
                        value={editingTask.priority}
                        onChange={(e) => setEditingTask({ ...editingTask, priority: e.target.value })}
                      >
                        <option value="low">Low Priority</option>
                        <option value="medium">Medium Priority</option>
                        <option value="high">High Priority</option>
                      </select>
                      <select
                        className={`px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                          darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                        }`}
                        value={editingTask.status}
                        onChange={(e) => setEditingTask({ ...editingTask, status: e.target.value })}
                      >
                        <option value="todo">To Do</option>
                        <option value="inprogress">In Progress</option>
                        <option value="complete">Complete</option>
                      </select>
                      <div className="flex-1 flex gap-2">
                        <input
                          type="text"
                          placeholder="Add tag"
                          className={`flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                            darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                          }`}
                          value={tagInput}
                          onChange={(e) => setTagInput(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addEditingTag())}
                        />
                        <button
                          onClick={addEditingTag}
                          className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
                        >
                          Add Tag
                        </button>
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {editingTask.tags.map(tag => (
                        <span key={tag} className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-full text-sm flex items-center gap-1">
                          {tag}
                          <button onClick={() => removeEditingTag(tag)}>
                            <X size={14} />
                          </button>
                        </span>
                      ))}
                    </div>
                    <div className="flex gap-2 pt-4">
                      <button
                        onClick={updateTask}
                        className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                      >
                        Save Changes
                      </button>
                      <button
                        onClick={() => setEditingTask(null)}
                        className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </Modal>
          </div>
        )}

        {activeTab === 'docs' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-lg p-6`}>
            <h2 className="text-2xl font-bold mb-6">Game Documentation</h2>
            <div className="space-y-4">
              {Object.entries(currentProject.documentation).map(([section, content]) => (
                <div key={section} className={`border ${darkMode ? 'border-gray-700' : 'border-gray-200'} rounded-lg overflow-hidden`}>
                  <div className={`flex justify-between items-center p-4 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-50 hover:bg-gray-100'} transition cursor-pointer`}
                       onClick={() => toggleDocSection(section)}>
                    <h3 className="text-lg font-semibold text-indigo-600">{section}</h3>
                    <div className="flex items-center gap-2">
                      {currentUser.role === 'admin' && (
                        <>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              setEditingDoc(editingDoc === section ? null : section);
                            }}
                            className={`p-1 ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-500 hover:text-indigo-600'} transition`}
                          >
                            <Edit size={16} />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              deleteDocSection(section);
                            }}
                            className={`p-1 ${darkMode ? 'text-gray-400 hover:text-red-400' : 'text-gray-500 hover:text-red-600'} transition`}
                          >
                            <Trash2 size={16} />
                          </button>
                        </>
                      )}
                      {expandedDocs[section] ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                    </div>
                  </div>
                  {expandedDocs[section] && (
                    <div className={`p-4 border-t ${darkMode ? 'border-gray-700' : ''}`}>
                      {editingDoc === section ? (
                        <div className="space-y-3">
                          <textarea
                            className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 h-32 ${
                              darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                            }`}
                            defaultValue={content}
                          />
                          <div className="flex gap-2">
                            <button className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition">
                              Save
                            </button>
                            <button
                              onClick={() => setEditingDoc(null)}
                              className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
                            >
                              Cancel
                            </button>
                          </div>
                        </div>
                      ) : (
                        <p className={`${darkMode ? 'text-gray-300' : 'text-gray-700'} whitespace-pre-wrap`}>{content}</p>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
            {currentUser.role === 'admin' && (
              <button 
                onClick={() => setShowAddSection(true)}
                className="mt-6 px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition flex items-center gap-2"
              >
                <Plus size={20} />
                Add Section
              </button>
            )}

            {/* Add Section Modal */}
            <Modal isOpen={showAddSection} onClose={() => setShowAddSection(false)}>
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">Add New Section</h3>
                <div className="space-y-4">
                  <input
                    type="text"
                    placeholder="Section title"
                    className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                      darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                    }`}
                    value={newSectionForm.title}
                    onChange={(e) => setNewSectionForm({ ...newSectionForm, title: e.target.value })}
                  />
                  <textarea
                    placeholder="Section content"
                    className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 h-32 ${
                      darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                    }`}
                    value={newSectionForm.content}
                    onChange={(e) => setNewSectionForm({ ...newSectionForm, content: e.target.value })}
                  />
                  <div className="flex gap-2">
                    <button
                      onClick={addDocSection}
                      className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                    >
                      Add Section
                    </button>
                    <button
                      onClick={() => {
                        setShowAddSection(false);
                        setNewSectionForm({ title: '', content: '' });
                      }}
                      className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            </Modal>
          </div>
        )}

        {activeTab === 'chat' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-lg overflow-hidden h-[calc(100vh-280px)]`}>
            <div className="flex h-full">
              <div className={`w-64 ${darkMode ? 'bg-gray-900' : 'bg-gray-100'} p-4 border-r ${darkMode ? 'border-gray-700' : ''}`}>
                <div className="flex gap-2 mb-4">
                  <button
                    onClick={() => setChatLeftView('channels')}
                    className={`flex-1 px-3 py-2 rounded-lg text-sm font-medium transition ${
                      chatLeftView === 'channels' 
                        ? 'bg-indigo-500 text-white' 
                        : darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'
                    }`}
                  >
                    <Hash size={16} className="inline mr-1" />
                    Channels
                  </button>
                  <button
                    onClick={() => setChatLeftView('members')}
                    className={`flex-1 px-3 py-2 rounded-lg text-sm font-medium transition ${
                      chatLeftView === 'members' 
                        ? 'bg-indigo-500 text-white' 
                        : darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'
                    }`}
                  >
                    <Users size={16} className="inline mr-1" />
                    Members
                  </button>
                </div>

                {chatLeftView === 'channels' ? (
                  <>
                    <h3 className="font-semibold mb-3">Channels</h3>
                    <div className="space-y-2">
                      {currentProject.channels.map(channel => (
                        <button
                          key={channel.id}
                          onClick={() => setSelectedChannel(channel.id)}
                          className={`w-full text-left px-3 py-2 rounded-lg transition ${
                            selectedChannel === channel.id 
                              ? 'bg-indigo-500 text-white' 
                              : darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-200'
                          }`}
                        >
                          # {channel.name}
                        </button>
                      ))}
                      {currentUser.role === 'admin' && (
                        <button className={`w-full text-left px-3 py-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-200'} text-indigo-600 flex items-center gap-2`}>
                          <Plus size={16} />
                          Add Channel
                        </button>
                      )}
                    </div>
                  </>
                ) : (
                  <>
                    <h3 className="font-semibold mb-3">Team Members</h3>
                    <div className="space-y-2">
                      {users.filter(u => currentProject.users.includes(u.id)).map(user => (
                        <div key={user.id} className="flex items-center gap-2 px-3 py-2">
                          <Circle size={8} className={user.online ? 'text-green-500' : 'text-gray-400'} fill="currentColor" />
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <span className={`text-sm font-medium ${darkMode ? 'text-gray-200' : ''}`}>{user.name}</span>
                              {user.role === 'admin' && (
                                <span className="px-2 py-0.5 bg-indigo-100 text-indigo-700 text-xs rounded-full">
                                  Admin
                                </span>
                              )}
                            </div>
                            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>{user.online ? 'Online' : 'Offline'}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </>
                )}
              </div>
              
              <div className="flex-1 flex flex-col">
                <div className="flex-1 p-6 overflow-y-auto">
                  <div className="space-y-4">
                    {(currentProject.messages[selectedChannel] || []).map(message => {
                      const sender = users.find(u => u.id === message.userId);
                      return (
                        <div key={message.id} className="flex gap-3">
                          <UserAvatar user={sender} size="md" />
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className={`font-semibold ${darkMode ? 'text-gray-200' : ''}`}>{sender?.name}</span>
                              {sender?.role === 'admin' && (
                                <span className="px-2 py-0.5 bg-indigo-100 text-indigo-700 text-xs rounded-full">
                                  Admin
                                </span>
                              )}
                              <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                {new Date(message.timestamp).toLocaleTimeString()}
                              </span>
                            </div>
                            <p className={`${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>{message.text}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
                
                <div className={`border-t ${darkMode ? 'border-gray-700' : ''} p-4`}>
                  <div className="flex gap-2">
                    <button className={`p-2 ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-500 hover:text-indigo-600'} transition`}>
                      <Paperclip size={20} />
                    </button>
                    <input
                      type="text"
                      placeholder={`Message #${currentProject.channels.find(c => c.id === selectedChannel)?.name}`}
                      className={`flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                      }`}
                      value={messageInput}
                      onChange={(e) => setMessageInput(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    />
                    <button
                      onClick={sendMessage}
                      className="p-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                    >
                      <Send size={20} />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'team' && currentUser.role === 'admin' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-lg p-6`}>
            <h2 className="text-2xl font-bold mb-6">Team Management</h2>
            
            <div className="mb-8">
              <h3 className="text-lg font-semibold mb-4">Current Team Members</h3>
              <div className="space-y-3">
                {users.filter(u => currentProject.users.includes(u.id)).map(user => (
                  <div key={user.id} className={`flex items-center justify-between p-4 ${darkMode ? 'bg-gray-700' : 'bg-gray-50'} rounded-lg`}>
                    <div className="flex items-center gap-3">
                      <UserAvatar user={user} size="md" />
                      <div>
                        <p className={`font-semibold ${darkMode ? 'text-gray-200' : ''}`}>{user.name}</p>
                        <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>@{user.username} • {user.role}</p>
                      </div>
                    </div>
                    {user.id !== currentUser.id && (
                      <button className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition">
                        Remove
                      </button>
                    )}
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold mb-4">Add Team Members</h3>
              <div className="space-y-3">
                {users.filter(u => !currentProject.users.includes(u.id)).map(user => (
                  <div key={user.id} className={`flex items-center justify-between p-4 ${darkMode ? 'bg-gray-700' : 'bg-gray-50'} rounded-lg`}>
                    <div className="flex items-center gap-3">
                      <UserAvatar user={user} size="md" />
                      <div>
                        <p className={`font-semibold ${darkMode ? 'text-gray-200' : ''}`}>{user.name}</p>
                        <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>@{user.username} • {user.role}</p>
                      </div>
                    </div>
                    <button className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition">
                      Add to Project
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Profile Modal */}
      <Modal isOpen={showProfile} onClose={() => setShowProfile(false)}>
        <div className="p-6">
          <h3 className="text-xl font-semibold mb-6">Edit Profile</h3>
          <div className="space-y-4">
            <div className="flex justify-center mb-6">
              <div className="relative">
                <UserAvatar user={{ ...currentUser, image: profileForm.image }} size="lg" />
                <button className={`absolute bottom-0 right-0 p-2 ${darkMode ? 'bg-gray-700' : 'bg-white'} rounded-full shadow-lg`}>
                  <Camera size={16} />
                </button>
              </div>
            </div>
            
            <div>
              <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Name</label>
              <input
                type="text"
                className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                  darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                }`}
                value={profileForm.name}
                onChange={(e) => setProfileForm({ ...profileForm, name: e.target.value })}
              />
            </div>
            
            <div>
              <label className={`block ${darkMode ? 'text-gray-300' : 'text-gray-700'} text-sm font-medium mb-2`}>Profile Image URL</label>
              <input
                type="text"
                placeholder="https://example.com/avatar.jpg"
                className={`w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                  darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'
                }`}
                value={profileForm.image}
                onChange={(e) => setProfileForm({ ...profileForm, image: e.target.value })}
              />
            </div>
            
            <div className="flex gap-2 pt-4">
              <button
                onClick={updateProfile}
                className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
              >
                Save Changes
              </button>
              <button
                onClick={() => setShowProfile(false)}
                className={`px-4 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-gray-200 hover:bg-gray-300'} rounded-lg transition`}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default App;